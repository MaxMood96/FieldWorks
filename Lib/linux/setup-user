#!/bin/bash
# Copyright (c) 2014 SIL International
# This software is licensed under the LGPL, version 2.1 or later
# (http://www.gnu.org/licenses/lgpl-2.1.html)
#
# See http://standards.freedesktop.org/basedir-spec/basedir-spec-0.6.html for standard
# locations and environment variables
#
# Note that setup-user is used without being inside environ settings.

[[ -z ${FW_DEBUG} ]] || set -x
declare -g debugVerboseFlag=""
[[ -z ${FW_DEBUG} ]] || debugVerboseFlag="-v"

# It's good to write our data and config to XDG_DATA_HOME and XDG_CONFIG_HOME.
# But in Ubuntu 20.04, these aren't set anyway, and so we just fall back to
# hard-coded defaults. And in flatpak they are set to good locations that we
# don't want to use yet so we can continue using the directories that are used
# by the deb package until we choose to migrate to new directories. So for now,
# for both deb and flatpak packages, hard-code the DATA and CONFIG locations.
# This could potentially cause trouble if any user had XDG_DATA_HOME or
# XDG_CONFIG_HOME set. We would need to be able to access these values on the
# host, from within the flatpak container, in order to use them.
STANDARD_XDG_DATA_HOME="${HOME}/.local/share"
STANDARD_XDG_CONFIG_HOME="${HOME}/.config"

# We will attempt to use XDG_DATA_HOME for FEC data.
# Set XDG_DATA_HOME to the standard location if it isn't already set, such as
# by the user or flatpak.
declare -g XDG_DATA_HOME
XDG_DATA_HOME="${XDG_DATA_HOME:-${STANDARD_XDG_DATA_HOME}}"

scriptdir="$(dirname "$0")"
prefix=$(cd "$scriptdir/../.."; /bin/pwd)
FW_DATA="${STANDARD_XDG_DATA_HOME}/fieldworks"
FW_CONFIG="${STANDARD_XDG_CONFIG_HOME}/fieldworks"
FW_LIB=$prefix/lib/fieldworks
FW_SHARE=$prefix/share/fieldworks
declare -g EC_COMMON_APPLICATION_DATA_PATH
EC_COMMON_APPLICATION_DATA_PATH="${XDG_DATA_HOME}/fec-common-app-data"

WRITEKEY="${FW_LIB}/WriteKey.exe"
READKEY="${FW_LIB}/ReadKey.exe"

# Usage: Debug "blah blah" "blah"
Debug()
{
	[[ -z ${FW_DEBUG} ]] || echo -e "$(date +'%F %T') setup-user[$$]: " "$@"
}

Debug "FW_DATA: ${FW_DATA}"
Debug "FW_CONFIG: ${FW_CONFIG}"
Debug "XDG_DATA_HOME: ${XDG_DATA_HOME}"
Debug "EC_COMMON_APPLICATION_DATA_PATH: ${EC_COMMON_APPLICATION_DATA_PATH}"
Debug "prefix: ${prefix}"

WriteKey()
{
	Debug "Writing" "$@"
	mono "${WRITEKEY}" "$@"
}

ReadKey()
{
	# MONO_DEBUG seems to trigger warnings being printed to stdout for
	# bad values in MONO_PATH. While correcting the occasional bad value
	# that creeps into MONO_PATH is good, just unsetting MONO_DEBUG here
	# will prevent surprise registry corruption when migrating registry
	# keys from old to new FW versions. This is LT-18815.
	(unset MONO_DEBUG
	mono "${READKEY}" "$@")
}

# For example:
#   CopyRegistryKey LM "Software/SIL/FieldWorks/7.0" "ProjectsDir" LM "Software/SIL/FieldWorks/8" "ProjectsDir"
CopyRegistryKey()
{
	SOURCE_ROOT="$1"
	SOURCE_LOCATION="$2"
	SOURCE_KEY="$3"

	DESTINATION_ROOT="$4"
	DESTINATION_LOCATION="$5"
	DESTINATION_KEY="$6"

	WriteKey "$DESTINATION_ROOT" "$DESTINATION_LOCATION" "$DESTINATION_KEY" \
		"$(ReadKey "$SOURCE_ROOT" "$SOURCE_LOCATION" "$SOURCE_KEY")"
}

# Install initial FieldWorks Encoding Converters files to a user-specific
# location
InstallUserFECData()
{
	# The source directory is the value used by
	# encoding-converters-core/Makefile.in REGROOT.
	local sourceDir
	sourceDir="/var/lib/fieldworks"
	local destDir
	destDir="${EC_COMMON_APPLICATION_DATA_PATH}"

	if [[ -d "${destDir}/registry" && -d "${destDir}/SIL" ]]; then
		Debug "FEC data is already installed into '${destDir}'."
		return 0
	fi

	Debug "Installing FEC data from '${sourceDir}' into '${destDir}'."
	mkdir -p "${destDir}"
	# Copy the two things that FEC Makefile.in installs: values.xml and
	# redist/MapsTables. The MapTables are elsewhere being copied to
	# FW_CONFIG, so it may or may not be important to copy them here as well.
	cp ${debugVerboseFlag} -dr "${sourceDir}/registry" "${sourceDir}/SIL" "${destDir}/"
}

(
	if [ ! -d "${FW_CONFIG}/Icu54/" ]; then
		echo "# Copying ICU data"
		mkdir -p "${FW_CONFIG}"
		cp ${debugVerboseFlag} -a "${FW_SHARE}/Icu54" "${FW_CONFIG}/"
	fi

	if [ ! -d "${FW_CONFIG}/SIL/" ]; then
		echo "# Copying encoding converter registry"
		mkdir -p "${FW_CONFIG}/"
		cp ${debugVerboseFlag} -a "${FW_SHARE}/SIL" "${FW_CONFIG}/"
	fi

	InstallUserFECData

	if [ ! -d "${FW_DATA}/Projects/" ]; then
		echo "# Creating default Project database directory"
		mkdir -p "${FW_DATA}/Projects/"
	fi

	mkdir -p "${FW_CONFIG}/SIL/Repository"
	mkdir -p "${FW_CONFIG}/MoveRepositoryTo"

	# Set registry keys

	cd "$FW_LIB"; RUNMODE="INSTALLED" . environ; cd "$OLDPWD"

	# Are there FW 9 registry settings?
	if ReadKey LM "Software/SIL/FieldWorks/9" "ProjectsDir" 2>/dev/null; then
		Debug "There are already FW 9 registry settings."
		# All done!
		:
	else
		# Are there FW 8 registry settings?
		if ReadKey LM "Software/SIL/FieldWorks/8" "ProjectsDir" 2>/dev/null; then
			# Migrate them to FW 9.

			echo "# Migrating from FW 8 registry settings."

			# Write any default settings for keys that are new in version 9.
			# None.

			# Migrate any settings from version 8 to version 9.
			CopyRegistryKey LM "Software/SIL/FieldWorks/8" "RootDataDir" LM "Software/SIL/FieldWorks/9" "RootDataDir"
			CopyRegistryKey LM "Software/SIL/FieldWorks/8" "RootCodeDir" LM "Software/SIL/FieldWorks/9" "RootCodeDir"
			CopyRegistryKey LM "Software/SIL/FieldWorks/8" "ProjectsDir" LM "Software/SIL/FieldWorks/9" "ProjectsDir"
		else
			# Are there FW 7 registry settings?
			if ReadKey LM "Software/SIL/FieldWorks/7.0" "ProjectsDir" 2>/dev/null; then
				# Migrate them to FW 9.

				echo "# Migrating from FW 7 registry settings."

				# Write any default settings for keys that are new in version 8 or 9.
				# None.

				# Migrate any settings from version 7 to version 9.
				CopyRegistryKey LM "Software/SIL/FieldWorks/7.0" "RootDataDir" LM "Software/SIL/FieldWorks/9" "RootDataDir"
				CopyRegistryKey LM "Software/SIL/FieldWorks/7.0" "RootCodeDir" LM "Software/SIL/FieldWorks/9" "RootCodeDir"
				CopyRegistryKey LM "Software/SIL/FieldWorks/7.0" "ProjectsDir" LM "Software/SIL/FieldWorks/9" "ProjectsDir"
			else
				# Create FW 9 registry settings for an empty registry.
				echo "# Creating FW 9 registry settings."

				# REVIEW these were taken from nant setup registry may not be correct for an install.
				if [ ! -d "${FW_CONFIG}/registry/LocalMachine/software/sil/encodingconverterrepository" ]; then
					WriteKey LM "Software/SIL/EncodingConverterRepository" "Registry" "${FW_CONFIG}/SIL/Repository/mappingRegistry.xml"
					WriteKey LM "Software/SIL/EncodingConverterRepository" "MoveRepositoryTo" "${FW_CONFIG}/MoveRepositoryTo"
				fi
				WriteKey LM "Software/Microsoft/.NETFramework/AssemblyFolders" "Primary Interop Assemblies" "$FW_LIB"
				WriteKey LM "Software/SIL" "InitIcu" "1"
				WriteKey LM "Software/SIL/FieldWorks" "InstallLanguageUseLog" "False"

				WriteKey LM "Software/SIL/FieldWorks/9" "RootDataDir" "${FW_CONFIG}/"
				WriteKey LM "Software/SIL/FieldWorks/9" "RootCodeDir" "${FW_SHARE}"
				WriteKey LM "Software/SIL/FieldWorks/9" "ProjectsDir" "${FW_DATA}/Projects"
			fi
		fi
	fi

	# Set values unconditionally, to take care of upgrades
	# TODO: implement a WriteKey option to only set and not overwrite values. See comments in FWNX-1065.
	# TODO: implement batch load/dump in WriteKey similar to dconf

	echo "# Writing required registry settings."

	WriteKey LM "Software/SIL" "Icu54DataDir" "${FW_CONFIG}/Icu54"
	WriteKey LM "Software/SIL" "Icu54Dir" "${FW_CONFIG}/Icu54"

	WriteKey LM "Software/SIL/SilEncConverters40" "PluginDir" "${FW_LIB}/EC/Plugins"
	WriteKey LM "Software/SIL/SilEncConverters40" "RootDir" "${FW_LIB}"

) | zenity --progress \
	--title="User specific setup" \
	--percentage=0 \
	--pulsate \
	--auto-close
